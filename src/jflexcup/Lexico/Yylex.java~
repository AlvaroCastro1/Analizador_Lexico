/* The following code was generated by JFlex 1.4.3 on 06/03/24, 22:57 */

package jflexcup.Lexico;

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/03/24, 22:57 from the specification file
 * <tt>C:/Users/Hp245-User/Documents/NetBeansProjects/Analizador_Lexico/src/jflexcup/Lexico/archivo.lex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\40\1\3\1\2\1\0\1\3\1\1\16\40\4\0\1\3\1\51"+
    "\1\55\1\0\1\37\1\32\1\33\1\56\1\46\1\62\1\30\1\25"+
    "\1\0\1\27\1\44\1\31\12\43\1\0\1\50\1\36\1\26\1\52"+
    "\1\47\1\0\5\37\1\42\2\37\1\41\21\37\1\54\1\0\1\57"+
    "\1\35\1\37\1\0\1\11\1\20\1\7\1\16\1\21\1\13\1\23"+
    "\1\10\1\4\2\37\1\14\1\37\1\5\1\15\1\45\1\37\1\12"+
    "\1\24\1\6\1\17\1\22\1\53\3\37\1\60\1\34\1\61\1\0"+
    "\41\40\2\0\4\37\4\0\1\37\2\0\1\40\7\0\1\37\4\0"+
    "\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37\4\0\14\37\16\0"+
    "\5\37\7\0\1\37\1\0\1\37\21\0\160\40\5\37\1\0\2\37"+
    "\2\0\4\37\1\0\1\37\6\0\1\37\1\0\3\37\1\0\1\37"+
    "\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\40\2\0\246\37"+
    "\1\0\46\37\2\0\1\37\6\0\51\37\6\0\1\37\1\0\55\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\1\40\10\0\33\37"+
    "\4\0\4\37\15\0\6\40\5\0\1\37\4\0\13\40\1\0\1\40"+
    "\3\0\53\37\37\40\4\0\2\37\1\40\143\37\1\0\1\37\10\40"+
    "\1\0\6\40\2\37\2\40\1\0\4\40\2\37\12\40\3\37\2\0"+
    "\1\37\17\0\1\40\1\37\1\40\36\37\33\40\2\0\131\37\13\40"+
    "\1\37\16\0\12\40\41\37\11\40\2\37\4\0\1\37\2\0\1\40"+
    "\30\37\4\40\1\37\11\40\1\37\3\40\1\37\5\40\22\0\31\37"+
    "\3\40\4\0\13\37\5\0\30\37\1\0\6\37\1\0\2\40\6\0"+
    "\10\40\52\37\72\40\66\37\3\40\1\37\22\40\1\37\7\40\12\37"+
    "\2\40\2\0\12\40\1\0\20\37\3\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\1\37\10\0\1\40\4\0"+
    "\2\37\1\0\3\37\2\40\2\0\12\40\4\37\7\0\2\37\1\0"+
    "\1\40\2\0\3\40\1\0\6\37\4\0\2\37\2\0\26\37\1\0"+
    "\7\37\1\0\2\37\1\0\2\37\1\0\2\37\2\0\1\40\1\0"+
    "\5\40\4\0\2\40\2\0\3\40\3\0\1\40\7\0\4\37\1\0"+
    "\1\37\7\0\14\40\3\37\1\40\13\0\3\40\1\0\11\37\1\0"+
    "\3\37\1\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0"+
    "\1\40\1\37\10\40\1\0\3\40\1\0\3\40\2\0\1\37\17\0"+
    "\2\37\2\40\2\0\12\40\1\0\1\37\7\0\1\37\6\40\1\0"+
    "\3\40\1\0\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\2\37\1\0\5\37\2\0\1\40\1\37\7\40\2\0\2\40\2\0"+
    "\3\40\7\0\3\40\4\0\2\37\1\0\3\37\2\40\2\0\12\40"+
    "\1\0\1\37\20\0\1\40\1\37\1\0\6\37\3\0\3\37\1\0"+
    "\4\37\3\0\2\37\1\0\1\37\1\0\2\37\3\0\2\37\3\0"+
    "\3\37\3\0\14\37\4\0\5\40\3\0\3\40\1\0\4\40\2\0"+
    "\1\37\6\0\1\40\16\0\12\40\11\0\1\37\6\0\5\40\10\37"+
    "\1\0\3\37\1\0\27\37\1\0\20\37\2\0\1\40\1\37\7\40"+
    "\1\0\3\40\1\0\4\40\7\0\2\40\1\0\3\37\2\0\1\37"+
    "\2\0\2\37\2\40\2\0\12\40\20\0\1\37\3\40\1\0\10\37"+
    "\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37\2\0\1\40"+
    "\1\37\7\40\1\0\3\40\1\0\4\40\7\0\2\40\6\0\2\37"+
    "\1\0\2\37\2\40\2\0\12\40\1\0\2\37\15\0\4\40\11\37"+
    "\1\0\3\37\1\0\51\37\2\40\1\37\7\40\1\0\3\40\1\0"+
    "\4\40\1\37\5\0\3\37\1\40\7\0\3\37\2\40\2\0\12\40"+
    "\12\0\6\37\1\0\3\40\1\0\22\37\3\0\30\37\1\0\11\37"+
    "\1\0\1\37\2\0\7\37\3\0\1\40\4\0\6\40\1\0\1\40"+
    "\1\0\10\40\6\0\12\40\2\0\2\40\15\0\60\37\1\40\2\37"+
    "\7\40\4\0\10\37\10\40\1\0\12\40\47\0\2\37\1\0\1\37"+
    "\1\0\5\37\1\0\30\37\1\0\1\37\1\0\12\37\1\40\2\37"+
    "\11\40\1\37\2\0\5\37\1\0\1\37\1\0\6\40\2\0\12\40"+
    "\2\0\4\37\40\0\1\37\27\0\2\40\6\0\12\40\13\0\1\40"+
    "\1\0\1\40\1\0\1\40\4\0\2\40\10\37\1\0\44\37\4\0"+
    "\24\40\1\0\2\40\5\37\13\40\1\0\44\40\11\0\1\40\71\0"+
    "\53\37\24\40\1\37\12\40\6\0\6\37\4\40\4\37\3\40\1\37"+
    "\3\40\2\37\7\40\3\37\4\40\15\37\14\40\1\37\17\40\2\0"+
    "\46\37\1\0\1\37\5\0\1\37\2\0\53\37\1\0\u014d\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\51\37\1\0"+
    "\4\37\2\0\41\37\1\0\4\37\2\0\7\37\1\0\1\37\1\0"+
    "\4\37\2\0\17\37\1\0\71\37\1\0\4\37\2\0\103\37\2\0"+
    "\3\40\40\0\20\37\20\0\126\37\2\0\6\37\3\0\u026c\37\2\0"+
    "\21\37\1\0\32\37\5\0\113\37\3\0\13\37\7\0\22\37\4\40"+
    "\11\0\23\37\3\40\13\0\22\37\2\40\14\0\15\37\1\0\3\37"+
    "\1\0\2\40\14\0\64\37\40\40\3\0\1\37\3\0\2\37\1\40"+
    "\2\0\12\40\41\0\17\40\6\0\131\37\7\0\5\37\2\40\42\37"+
    "\1\40\1\37\5\0\106\37\12\0\37\37\1\0\14\40\4\0\14\40"+
    "\12\0\12\40\36\37\2\0\5\37\13\0\54\37\4\0\32\37\6\0"+
    "\12\40\46\0\27\37\5\40\4\0\65\37\12\40\1\0\35\40\2\0"+
    "\13\40\6\0\12\40\15\0\1\37\10\0\16\40\1\0\20\40\61\0"+
    "\5\40\57\37\21\40\10\37\3\0\12\40\21\0\11\40\14\0\3\40"+
    "\36\37\15\40\2\37\12\40\54\37\16\40\14\0\44\37\24\40\10\0"+
    "\12\40\3\0\3\37\12\40\44\37\2\0\11\37\7\0\53\37\2\0"+
    "\3\37\20\0\3\40\1\0\25\40\4\37\1\40\6\37\1\40\2\37"+
    "\3\40\1\37\5\0\300\37\100\40\u0116\37\2\0\6\37\2\0\46\37"+
    "\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37"+
    "\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37"+
    "\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37"+
    "\1\0\7\37\16\0\5\40\32\0\5\40\20\0\2\37\23\0\1\37"+
    "\13\0\5\40\1\0\12\40\1\0\1\37\15\0\1\37\20\0\15\37"+
    "\3\0\41\37\17\0\15\40\4\0\1\40\3\0\14\40\21\0\1\37"+
    "\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37\6\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37\2\0\4\37"+
    "\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\345\37\6\0\4\37"+
    "\3\40\2\37\14\0\46\37\1\0\1\37\5\0\1\37\2\0\70\37"+
    "\7\0\1\37\17\0\1\40\27\37\11\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\40\40\57\0\1\37\u01d5\0\3\37\31\0\11\37\6\40"+
    "\1\0\5\37\2\0\5\37\4\0\126\37\2\0\2\40\2\0\3\37"+
    "\1\0\132\37\1\0\4\37\5\0\53\37\1\0\136\37\21\0\40\37"+
    "\60\0\20\37\u0200\0\u19c0\37\100\0\u568d\37\103\0\56\37\2\0\u010d\37"+
    "\3\0\20\37\12\40\2\37\24\0\57\37\1\40\4\0\12\40\1\0"+
    "\37\37\2\40\120\37\2\40\45\0\11\37\2\0\147\37\2\0\100\37"+
    "\5\0\2\37\1\0\1\37\1\0\5\37\30\0\20\37\1\40\3\37"+
    "\1\40\4\37\1\40\27\37\5\40\4\0\1\40\13\0\1\37\7\0"+
    "\64\37\14\0\2\40\62\37\22\40\12\0\12\40\6\0\22\40\6\37"+
    "\3\0\1\37\1\0\2\37\13\40\34\37\10\40\2\0\27\37\15\40"+
    "\14\0\35\37\3\0\4\40\57\37\16\40\16\0\1\37\12\40\6\0"+
    "\5\37\1\40\12\37\12\40\5\37\1\0\51\37\16\40\11\0\3\37"+
    "\1\40\10\37\2\40\2\0\12\40\6\0\27\37\3\0\1\37\3\40"+
    "\62\37\1\40\1\37\3\40\2\37\2\40\5\37\2\40\1\37\1\40"+
    "\1\37\30\0\3\37\2\0\13\37\5\40\2\0\3\37\2\40\12\0"+
    "\6\37\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37\1\0"+
    "\53\37\1\0\16\37\6\0\163\37\10\40\1\0\2\40\2\0\12\40"+
    "\6\0\u2ba4\37\14\0\27\37\4\0\61\37\u2104\0\u016e\37\2\0\152\37"+
    "\46\0\7\37\14\0\5\37\5\0\1\37\1\40\12\37\1\0\15\37"+
    "\1\0\5\37\1\0\1\37\1\0\2\37\1\0\2\37\1\0\154\37"+
    "\41\0\u016b\37\22\0\100\37\2\0\66\37\50\0\15\37\3\0\20\40"+
    "\20\0\20\40\3\0\2\37\30\0\3\37\31\0\1\37\6\0\5\37"+
    "\1\0\207\37\2\0\1\40\4\0\1\37\13\0\12\40\7\0\32\37"+
    "\4\0\1\37\1\0\32\37\13\0\131\37\3\0\6\37\2\0\6\37"+
    "\2\0\6\37\2\0\3\37\3\0\2\37\3\0\2\37\22\0\3\40"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\12\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\3\1\1\12\1\3\1\13\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\1\21\2\1\1\22"+
    "\1\23\1\24\1\25\1\3\1\26\1\27\1\30\6\3"+
    "\1\31\5\3\1\32\1\33\1\34\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\2\0\1\3\1\42\1\43\1\3"+
    "\2\0\1\44\1\45\1\0\1\45\1\46\4\3\1\47"+
    "\7\3\2\0\1\13\2\3\1\50\3\3\1\51\1\3"+
    "\1\0\1\52\2\3\1\53\3\3\1\52\2\0\1\3"+
    "\1\54\1\3\1\55\1\3\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\146\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u0363\0\u03c9\0\u03fc\0\u0363"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\146\0\146\0\146\0\u04fb"+
    "\0\u052e\0\u0561\0\146\0\u0594\0\u05c7\0\146\0\146\0\146"+
    "\0\146\0\u05fa\0\377\0\146\0\146\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\146\0\146\0\146\0\146\0\u0891\0\u08c4\0\146"+
    "\0\146\0\146\0\u0363\0\u08f7\0\u092a\0\146\0\146\0\u095d"+
    "\0\u0594\0\u0990\0\146\0\u0990\0\u05c7\0\146\0\377\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\377\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u08f7\0\u0c5a\0\u0c8d"+
    "\0\377\0\u0cc0\0\u0cf3\0\u0d26\0\377\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\146\0\u0e58\0\u0e8b\0\u0ebe\0\146\0\u0dbf"+
    "\0\u0ef1\0\u0f24\0\377\0\u0f57\0\377\0\u0f8a\0\377\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\2\7\1\10\2\7\1\11"+
    "\1\12\1\13\1\7\1\14\2\7\1\15\1\16\1\7"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\7\1\3\1\32\1\7\1\33"+
    "\1\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\63\3"+
    "\65\0\1\5\64\0\1\7\1\52\5\7\1\53\11\7"+
    "\12\0\5\7\1\0\1\7\1\54\4\0\1\7\1\55"+
    "\12\0\21\7\12\0\5\7\1\0\1\7\1\54\4\0"+
    "\1\7\1\55\12\0\4\7\1\56\1\57\13\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\15\7\1\60\3\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\10\7\1\61\1\62\7\7"+
    "\12\0\5\7\1\0\1\7\1\54\4\0\1\7\1\55"+
    "\12\0\11\7\1\63\7\7\12\0\5\7\1\0\1\7"+
    "\1\54\4\0\1\7\1\55\12\0\11\7\1\64\3\7"+
    "\1\65\3\7\12\0\5\7\1\0\1\7\1\54\4\0"+
    "\1\7\1\55\12\0\10\7\1\66\10\7\12\0\5\7"+
    "\1\0\1\7\1\54\4\0\1\7\1\55\12\0\11\7"+
    "\1\67\7\7\12\0\5\7\1\0\1\7\1\54\4\0"+
    "\1\7\1\55\12\0\4\7\1\70\14\7\12\0\5\7"+
    "\1\0\1\7\1\54\4\0\1\71\1\55\33\0\1\72"+
    "\1\73\62\0\1\74\62\0\1\73\1\75\61\0\1\73"+
    "\62\0\1\73\1\0\1\76\1\77\57\0\1\73\4\0"+
    "\1\100\55\0\1\73\5\0\1\101\54\0\1\102\7\0"+
    "\1\103\30\0\21\7\12\0\3\7\1\53\1\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\51\0\1\33\1\104"+
    "\22\0\6\7\1\105\12\7\12\0\5\7\1\0\1\7"+
    "\1\54\4\0\1\7\1\55\34\0\1\106\62\0\1\107"+
    "\40\0\4\7\1\110\14\7\12\0\5\7\1\0\1\7"+
    "\1\54\4\0\1\7\1\55\6\0\2\111\1\112\52\111"+
    "\1\113\1\114\4\111\2\115\1\0\52\115\2\116\4\115"+
    "\4\0\2\7\1\117\16\7\12\0\5\7\1\0\1\7"+
    "\1\54\4\0\1\7\1\55\12\0\5\7\1\120\13\7"+
    "\12\0\5\7\1\0\1\7\1\54\4\0\1\7\1\55"+
    "\12\0\20\7\1\121\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\5\7\1\122\13\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\11\7\1\123\7\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\6\7\1\124\12\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\1\7\1\125\17\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\13\7\1\126\5\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\7\7\1\127\11\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\20\7\1\130\12\0\5\7"+
    "\1\0\1\7\1\54\4\0\1\7\1\55\12\0\1\131"+
    "\20\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\11\7\1\132\7\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\1\133\20\7"+
    "\12\0\5\7\1\0\1\7\1\54\4\0\1\7\1\55"+
    "\6\0\2\76\1\134\25\76\1\135\32\76\2\77\1\0"+
    "\60\77\43\0\1\136\23\0\1\137\20\7\12\0\5\7"+
    "\1\0\1\7\1\54\4\0\1\7\1\55\12\0\1\140"+
    "\20\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\6\0\55\112\1\113\5\112\4\0\6\7\1\117"+
    "\12\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\15\7\1\141\3\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\12\7\1\142"+
    "\6\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\5\7\1\52\13\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\17\7\1\117"+
    "\1\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\14\7\1\143\4\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\5\7\1\144"+
    "\13\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\15\7\1\145\3\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\12\7\1\117"+
    "\6\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\6\7\1\52\12\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\2\7\1\146"+
    "\16\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\6\0\30\134\1\147\32\134\2\76\1\134\25\76"+
    "\1\135\1\150\31\76\4\0\1\7\1\151\17\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\10\7\1\152\10\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\21\7\12\0\5\7\1\0"+
    "\1\7\1\153\4\0\1\7\1\55\12\0\10\7\1\154"+
    "\10\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\12\0\13\7\1\155\5\7\12\0\5\7\1\0"+
    "\1\7\1\54\4\0\1\7\1\55\12\0\3\7\1\156"+
    "\15\7\12\0\5\7\1\0\1\7\1\54\4\0\1\7"+
    "\1\55\6\0\30\134\1\147\1\157\31\134\2\160\1\0"+
    "\25\160\1\161\32\160\4\0\2\7\1\162\16\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\15\7\1\163\3\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\15\7\1\117\3\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\12\0"+
    "\10\7\1\164\10\7\12\0\5\7\1\0\1\7\1\54"+
    "\4\0\1\7\1\55\12\0\4\7\1\165\14\7\12\0"+
    "\5\7\1\0\1\7\1\54\4\0\1\7\1\55\6\0"+
    "\2\160\1\0\25\160\1\161\1\150\31\160\4\0\7\7"+
    "\1\166\11\7\12\0\5\7\1\0\1\7\1\54\4\0"+
    "\1\7\1\55\12\0\2\7\1\167\16\7\12\0\5\7"+
    "\1\0\1\7\1\54\4\0\1\7\1\55\12\0\21\7"+
    "\12\0\5\7\1\0\1\7\1\170\4\0\1\7\1\55"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4029];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\27\1\3\11\3\1\1\11"+
    "\2\1\4\11\2\1\2\11\14\1\4\11\1\0\1\1"+
    "\3\11\2\0\1\1\2\11\1\1\2\0\1\11\1\1"+
    "\1\0\1\11\15\1\2\0\11\1\1\0\3\1\1\11"+
    "\3\1\1\11\2\0\6\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public static void main(String[] args){
        Yylex analizadorLexico = new Yylex(new InputStreamReader(System.in));
        try {
            analizadorLexico.yylex();
        } catch(IOException x) {
            System.out.println("Error en la línea " + analizadorLexico.yyline +
                               " columna " + analizadorLexico.yycolumn);
        }
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { System.out.println("<MAYOR_O_IGUAL_QUE, " + yytext() + ">");
          }
        case 48: break;
        case 1: 
          { System.out.println("<ANY, " + yytext() + ">");
          }
        case 49: break;
        case 37: 
          { System.out.println("<CADENA_simple, " + yytext() + ">");
          }
        case 50: break;
        case 12: 
          { System.out.println("<PARENTESIS_ABRE, " + yytext() + ">");
          }
        case 51: break;
        case 34: 
          { System.out.println("<DISTINTO, " + yytext() + ">");
          }
        case 52: break;
        case 38: 
          { System.out.println("<TIPO, " + yytext() + ">");
          }
        case 53: break;
        case 2: 
          { /* Ignorar */;
          }
        case 54: break;
        case 24: 
          { System.out.println("<VECTOR, " + yytext() + ">");
          }
        case 55: break;
        case 14: 
          { System.out.println("<fin, " + yytext() + ">");
          }
        case 56: break;
        case 26: 
          { System.out.println("<AUTO_INCREMENTO, " + yytext() + ">");
          }
        case 57: break;
        case 31: 
          { System.out.println("<Y_LOGICO, " + yytext() + ">");
          }
        case 58: break;
        case 44: 
          { System.out.println("<WHILE, " + yytext() + ">");
          }
        case 59: break;
        case 45: 
          { System.out.println("<SWITCH, " + yytext() + ">");
          }
        case 60: break;
        case 30: 
          { /* Ignorar comentarios de una línea */;
          }
        case 61: break;
        case 21: 
          { System.out.println("<PARENTESIS_CIERRA, " + yytext() + ">");
          }
        case 62: break;
        case 4: 
          { System.out.println("<suma, " + yytext() + ">");
          }
        case 63: break;
        case 9: 
          { System.out.println("<modulo, " + yytext() + ">");
          }
        case 64: break;
        case 16: 
          { System.out.println("<MAYOR_QUE, " + yytext() + ">");
          }
        case 65: break;
        case 32: 
          { System.out.println("<O_LOGICO, " + yytext() + ">");
          }
        case 66: break;
        case 41: 
          { System.out.println("<ELSE, " + yytext() + ">");
          }
        case 67: break;
        case 8: 
          { System.out.println("<division, " + yytext() + ">");
          }
        case 68: break;
        case 39: 
          { System.out.println("<FOR, " + yytext() + ">");
          }
        case 69: break;
        case 18: 
          { System.out.println("<CORCHETE_CIERRA, " + yytext() + ">");
          }
        case 70: break;
        case 10: 
          { System.out.println("<MENOR_QUE, " + yytext() + ">");
          }
        case 71: break;
        case 29: 
          { System.out.println("<AUTO_DECREMENTO, " + yytext() + ">");
          }
        case 72: break;
        case 20: 
          { System.out.println("<LLAVE_CIERRA, " + yytext() + ">");
          }
        case 73: break;
        case 25: 
          { System.out.println("<DO, " + yytext() + ">");
          }
        case 74: break;
        case 13: 
          { System.out.println("<EXPRESION_CONDICIONAL, " + yytext() + ">");
          }
        case 75: break;
        case 28: 
          { System.out.println("<IGUALDAD, " + yytext() + ">");
          }
        case 76: break;
        case 36: 
          { System.out.println("<CADENA, " + yytext() + ">");
          }
        case 77: break;
        case 17: 
          { System.out.println("<CORCHETE_ABRE, " + yytext() + ">");
          }
        case 78: break;
        case 11: 
          { System.out.println("<NUMERO, " + yytext() + ">");
          }
        case 79: break;
        case 15: 
          { System.out.println("<NEGACION, " + yytext() + ">");
          }
        case 80: break;
        case 3: 
          { System.out.println("<ID, " + yytext() + ">");
          }
        case 81: break;
        case 22: 
          { System.out.println("<IF, " + yytext() + ">");
          }
        case 82: break;
        case 42: 
          { /* Ignorar comentarios de varias líneas */;
          }
        case 83: break;
        case 33: 
          { System.out.println("<MENOR_O_IGUAL_QUE, " + yytext() + ">");
          }
        case 84: break;
        case 27: 
          { System.out.println("<ASIGNACION_COMPUESTA, " + yytext() + ">");
          }
        case 85: break;
        case 6: 
          { System.out.println("<menos, " + yytext() + ">");
          }
        case 86: break;
        case 40: 
          { System.out.println("<CASE, " + yytext() + ">");
          }
        case 87: break;
        case 43: 
          { System.out.println("<ENTRADA, " + yytext() + ">");
          }
        case 88: break;
        case 23: 
          { System.out.println("<Funcion, " + yytext() + ">");
          }
        case 89: break;
        case 47: 
          { System.out.println("<SALIDA, " + yytext() + ">");
          }
        case 90: break;
        case 5: 
          { System.out.println("<ASIGNACION_SIMPLE, " + yytext() + ">");
          }
        case 91: break;
        case 46: 
          { System.out.println("<DEFAULT, " + yytext() + ">");
          }
        case 92: break;
        case 7: 
          { System.out.println("<multiplicacion, " + yytext() + ">");
          }
        case 93: break;
        case 19: 
          { System.out.println("<LLAVE_ABRE, " + yytext() + ">");
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
